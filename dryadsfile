import os
import re
import shutil

from dryads import Dryads  # type: ignore
from rich.progress import track


def read_md(filepath: str) -> str:
    with open(filepath, "r", encoding="utf-8") as f:
        return str(f.read())


def write_md(filepath: str, text: str) -> None:
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(text)


def get_link_for_img(text: str) -> list[str]:
    patterns: list[str] = [
        r"!\[.*?\]\((.*?)\)",
        r"<img.*?src=[\'\"](.*?)[\'\"].*?>",
    ]
    return [item for pattern in patterns for item in re.findall(pattern, text)]


def get_link_for_link(text: str) -> list[str]:
    patterns: list[str] = [
        r"(?<!!)\[.*?\]\((.*?)\)",
        r"<a.*?href=[\'\"](.*?)[\'\"].*?>",
    ]

    return [item for pattern in patterns for item in re.findall(pattern, text)]


RESOURCE_PATH = "resource"
STASH_PATH = ".stash"


def link():
    """检查链接可达性（不包含图床）"""
    """
    内部链接: 相对路径[#标题]
    外部链接: http开头或者www开头
    """

    class Link:
        def __init__(self, filep: str, linen: int, linkc: str) -> None:
            # 这里确实命名比较奇怪
            self.filep: str = filep
            self.linen: int = linen
            self.linkc: str = linkc

        def __str__(self) -> str:
            return str(self.filep) + ":" + str(self.linen) + " " + str(self.linkc)

        def __repr__(self) -> str:
            return repr(self.filep) + ":" + repr(self.linen) + " " + repr(self.linkc)

    ZWEIX_CS_NOTES_PREFIX = "https://github.com/zweix123/CS-notes/blob/master"

    links: list[Link] = []

    for root, _, files in os.walk("."):
        root_path_split = root.split(os.sep)
        root_path_split = root_path_split[1:]
        if len(root_path_split) > 0 and (
            root_path_split[0].startswith(".")
            or root_path_split[0] in (RESOURCE_PATH, STASH_PATH)
        ):
            continue
        for f in files:
            if not f.endswith("md"):
                continue
            filepath = os.path.join(root, f)
            with open(filepath, "r", encoding="utf-8") as fhandle:
                for linen, linec in enumerate(fhandle):
                    linec = linec.strip()
                    for link in get_link_for_link(linec):
                        links.append(Link(filepath, linen, link))

    internal_links: list[Link] = []
    external_links: list[Link] = []

    for l in links:
        assert not l.linkc.startswith(ZWEIX_CS_NOTES_PREFIX)
        if l.linkc.startswith(("http", "www")):
            external_links.append(l)
        else:
            assert l.linkc.startswith((".", "#"))
            internal_links.append(l)

    def print_links(name: str, links: list[Link]) -> None:
        print(name)
        for l in links:
            print(l)

    def handle_internal():
        print_links("internal_links", internal_links)

    handle_internal()

    def handle_external():
        print_links("external_links", external_links)

    handle_external()


def img():
    """检测图片"""
    """
    三种对象
        文本文件路径
        图片链接路径
        资源实际路径
    文本文件路径Y 图片链接路径Y 资源实际路径N: 图片不在, 无法正常显示
    文本文件路径Y 图片链接路径N 资源实际路径Y: 不可能, 无法判断资源实际路径正确
    文本文件路径N 图片链接路径Y 资源实际路径Y: 文件是被mv过的, 拷贝资源并修改
    文本文件路径N 图片链接路径N 资源实际路径N: 假如文本文件的Path和图片链接的name拼起来和资源路径存在, 则说明重命名
    """
    PREFIX = "https://cdn.jsdelivr.net/gh/zweix123/CS-notes@master/resource/"

    class Path:
        def __init__(self, path: list[str], name: str) -> None:
            self.path = path
            self.name = name

        def __hash__(self) -> int:
            return hash("@".join(self.path + [self.name]))

        def __eq__(self, other) -> bool:
            return self.path == other.path and self.name == other.name

        def __str__(self) -> str:
            return str(self.path) + "+" + str(self.name)

        def __repr__(self) -> str:
            return repr(self.path) + "+" + repr(self.name)

    md_img: dict[Path, list[Path]] = {}
    res: set[Path] = set()  # 资源

    unlocal: list[tuple[str, str]] = []  # 不使用PREFIX前缀的图片链接, (filepath, link)
    matched: set[Path] = set()  # 成功匹配的, 用来筛选未使用的资源, 资源
    unmatched: set[Path] = set()  # 通过matched剔除res, 资源
    unfind: list[tuple[Path, Path]] = []  # 找不到资源的链接, (filepath, link)
    mved: list[Path] = []  # 被移动的mved, 需要特殊处理, Markdown
    rename: list[Path] = []  # 文本和图片重命名而忘记文本中的内容链接变化, Markdown

    for root, _, files in os.walk("."):
        root_path_split = root.split(os.sep)
        root_path_split = root_path_split[1:]
        if len(root_path_split) > 0 and (
            root_path_split[0].startswith(".")
            or root_path_split[0] in (RESOURCE_PATH, STASH_PATH)
        ):
            continue
        for f in files:
            if not f.endswith("md"):
                continue
            filepath = os.path.join(root, f)
            links = get_link_for_img(read_md(filepath))
            md = Path(root_path_split, f)
            md_img[md] = []

            for link in links:
                if not link.startswith(PREFIX):
                    unlocal.append((filepath, link))
                else:
                    link = link[len(PREFIX) :]
                    link_split = link.split("/")
                    assert len(link_split) > 0
                    img = Path(link_split[:-1], link_split[-1])
                    md_img[md].append(img)
    for root, _, files in os.walk(RESOURCE_PATH):
        root_path_split = root.split(os.sep)
        root_path_split = root_path_split[1:]
        for f in files:
            res.add(Path(root_path_split, f))

    for md, imgs in md_img.items():

        for img in imgs:
            if md.path == img.path:
                if img in res:
                    matched.add(img)
                else:
                    unfind.append((md, img))
            else:
                if img in res:
                    mved.append(md)
                else:
                    if Path(md.path, img.name) in res:
                        rename.append(md)
                    else:
                        assert False, str(md) + " " + str(img)

    def handle_rename():
        print("rename", rename)
        for md in rename:
            for img in md_img[md]:
                if md.path != img.path and img not in res:
                    assert Path(md.path, img.name) in res
                    filepath = os.path.join(".", *md.path, md.name)
                    old_link = PREFIX + "/".join(img.path + [img.name])
                    new_link = PREFIX + "/".join(md.path + [img.name])

                    write_md(filepath, read_md(filepath).replace(old_link, new_link))

                    matched.add(Path(md.path, img.name))

    handle_rename()

    def handle_mved():
        print("mved", mved)
        for md in mved:
            for img in md_img[md]:
                if md.path != img.path and img in res:
                    filepath = os.path.join(".", *md.path, md.name)
                    old_link = PREFIX + "/".join(img.path + [img.name])
                    new_link = PREFIX + "/".join(md.path + [img.name])
                    old_path = os.path.join(".", RESOURCE_PATH, *img.path, img.name)
                    new_path = os.path.join(".", RESOURCE_PATH, *md.path, img.name)
                    new_dir = os.path.join(".", RESOURCE_PATH, *md.path)

                    if not os.path.exists(new_dir):
                        os.makedirs(new_dir)
                    assert not os.path.exists(new_path), "命名冲突: " + new_path

                    shutil.move(old_path, new_path)
                    write_md(filepath, read_md(filepath).replace(old_link, new_link))

                    matched.add(img)

    handle_mved()

    unmatched.update(set([r for r in list(res) if r not in matched]))

    def handle_unmatched():
        print("unmatched", unmatched)

        if not os.path.exists(STASH_PATH):
            os.mkdir(STASH_PATH)
        for r in unmatched:
            path = os.path.join(".", RESOURCE_PATH, *r.path, r.name)
            new_path = os.path.join(STASH_PATH, r.name)
            assert os.path.exists(path)

            shutil.move(path, new_path)

    handle_unmatched()

    print("unlocal", unlocal)
    print("unfind", unfind)


def cnt():
    """统计字数"""
    import string

    cnt_en, cnt_zh, cnt_dg, cnt_pu = (0 for _ in range(4))
    filepaths = [
        os.path.join(root, f)
        for root, dirs, files in os.walk(".")
        for f in files
        if f.endswith("md")
    ]

    for filepath in track(filepaths):
        with open(filepath, "r", encoding="utf-8") as f:
            for line in f:
                for c in line:
                    if c in string.ascii_letters:  # 英文
                        cnt_en += 1
                    elif c.isalpha():  # 中文: isalpha得到中英文, 但英文已被分支
                        cnt_zh += 1
                    elif c.isdigit():  # 数字
                        cnt_dg += 1
                    elif c.isspace():  # 空格
                        pass
                    else:  # 标点符号
                        cnt_pu += 1

    print("文章", str(len(filepaths)), "个"),
    print("字母", str(cnt_en), "个"),
    print("汉字", str(cnt_zh), "字"),
    print("数字", str(cnt_dg), "位"),
    print("标点", str(cnt_pu), "个"),
    print("共约", str(int(cnt_zh + cnt_en // 6 + cnt_dg // 32)), "字"),


CMDS = {
    "cnt": cnt,
    "img": img,
    "link": link,
}

Dryads(CMDS)
